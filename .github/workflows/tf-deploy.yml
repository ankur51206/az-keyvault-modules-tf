name: Deploy Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to deploy: (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  terraform-execution:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.4.0'

    - name: Set Working Directory
      id: set-working-directory
      run: |
        echo "## Setting Working Directory"
        ENV_PATH="./environments"
        echo "## Changing to directory $ENV_PATH"
        cd $ENV_PATH || exit 1
        echo "## Current Directory"
        pwd
        echo "## List Files"
        ls -la

    - name: Create backend.tf
      run: |
        echo "## Creating backend.tf"
        ENV_PATH="./environments"
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        cat > ${ENV_PATH}/backend.tf << EOL
        terraform {
          backend "azurerm" {
            resource_group_name  = "${{ secrets.STATE_RESOURCE_GROUP_NAME }}"
            storage_account_name = "${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}"
            container_name       = "${{ secrets.STATE_CONTAINER_NAME }}"
            key                  = "${REPO_NAME}/${{ github.event.inputs.environment }}.tfstate"
          }
        }
        EOL
        echo "## backend.tf created at $ENV_PATH"

    - name: Create terraform.tfvars
      run: |
        echo "## Creating terraform.tfvars"
        ENV_PATH="./environments"
        echo "client_id = \"${{ secrets.ARM_CLIENT_ID }}\"" > ${ENV_PATH}/terraform.tfvars
        echo "client_secret = \"${{ secrets.ARM_CLIENT_SECRET }}\"" >> ${ENV_PATH}/terraform.tfvars
        echo "subscription_id = \"${{ secrets.ARM_SUBSCRIPTION_ID }}\"" >> ${ENV_PATH}/terraform.tfvars
        echo "tenant_id = \"${{ secrets.ARM_TENANT_ID }}\"" >> ${ENV_PATH}/terraform.tfvars
        echo "object_id = \"${{ secrets.ARM_OBJECT_ID }}\"" >> ${ENV_PATH}/terraform.tfvars
        echo "environment_name = \"${{ github.event.inputs.environment }}\"" >> ${ENV_PATH}/terraform.tfvars
        echo "## Contents of terraform.tfvars:"
        cat ${ENV_PATH}/terraform.tfvars

    - name: Verify terraform.tfvars Location
      run: |
        echo "## Verifying terraform.tfvars Location"
        ENV_PATH="./environments"
        echo "## Listing Files in $ENV_PATH"
        ls -la $ENV_PATH

    - name: Initialize Terraform
      run: |
        echo "## Initializing Terraform"
        ENV_PATH="./environments"
        cd $ENV_PATH || exit 1
        echo "## Listing Files in $ENV_PATH"
        ls -la
        cat backend.tf
        terraform init || { echo "Terraform init failed"; exit 1; }
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Plan Terraform Changes
      run: |
        echo "## Planning Terraform Changes"
        ENV_PATH="./environments"
        cd $ENV_PATH || exit 1
        terraform plan -var-file=terraform.tfvars -out=tfplan || { echo "Terraform plan failed"; exit 1; }
        echo "## Terraform Plan Completed"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Approval before Apply
      uses: peter-evans/enable-pending-approval@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        step-message: "Do you want to apply the Terraform changes?"
        pending-comment: true

    - name: Apply Terraform Changes
      if: steps.enable-pending-approval.outputs.approval == 'true'
      run: |
        echo "## Applying Terraform Changes"
        ENV_PATH="./environments"
        cd $ENV_PATH
        terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
