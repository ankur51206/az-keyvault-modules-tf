name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to destroy resources: (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      key_vault_name:
        description: 'Enter the Key Vault name to manage'
        required: false
        default: 'sample-key-vault'
      proceed_destroy:
        description: 'Would you like to destroy specific Terraform resources?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      resources_to_destroy:
        description: 'Comma-separated list of resources to destroy (e.g., aws_instance.my_instance, aws_s3_bucket.my_bucket)'
        required: false

jobs:
  init-and-fetch-state:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.4.0'

      - name: Set Working Directory
        run: |
          echo "## Setting Working Directory"
          ENV_PATH="./environments"
          cd "$ENV_PATH" || exit 1

      - name: Create backend.tf
        run: |
          echo "## Creating backend.tf"
          ENV_PATH="./environments"
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          KEY_VAULT_NAME="${{ github.event.inputs.key_vault_name }}"
          if [ -z "$KEY_VAULT_NAME" ]; then
            KEY_VAULT_NAME="sample-key-vault"  # Fallback value if not provided
          fi
          cat > ${ENV_PATH}/backend.tf << EOL
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ secrets.STATE_RESOURCE_GROUP_NAME }}"
              storage_account_name = "${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}"
              container_name       = "${{ secrets.STATE_CONTAINER_NAME }}"
              key                  = "${REPO_NAME}/${KEY_VAULT_NAME}-${{ github.event.inputs.environment }}.tfstate"
            }
          }
          EOL

      - name: Initialize Terraform
        run: |
          echo "## Initializing Terraform"
          ENV_PATH="./environments"
          cd "$ENV_PATH" || exit 1
          terraform init || { echo "Terraform init failed"; exit 1; }
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Fetch Terraform State
        id: state
        run: |
          echo "## Fetching Terraform State"
          ENV_PATH="./environments"
          cd "$ENV_PATH" || exit 1
          terraform state list > state_list.txt || { echo "Fetching state failed"; exit 1; }
          cat state_list.txt
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  destroy:
    runs-on: ubuntu-latest
    needs: init-and-fetch-state
    if: github.event.inputs.proceed_destroy == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.4.0'

      - name: Set Working Directory
        run: |
          echo "## Setting Working Directory"
          ENV_PATH="./environments"
          cd "$ENV_PATH" || exit 1

      - name: Create backend.tf
        run: |
          echo "## Creating backend.tf"
          ENV_PATH="./environments"
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          KEY_VAULT_NAME="${{ github.event.inputs.key_vault_name }}"
          if [ -z "$KEY_VAULT_NAME" ]; then
            KEY_VAULT_NAME="sample-key-vault"  # Fallback value if not provided
          fi
          cat > ${ENV_PATH}/backend.tf << EOL
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ secrets.STATE_RESOURCE_GROUP_NAME }}"
              storage_account_name = "${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}"
              container_name       = "${{ secrets.STATE_CONTAINER_NAME }}"
              key                  = "${REPO_NAME}/${KEY_VAULT_NAME}-${{ github.event.inputs.environment }}.tfstate"
            }
          }
          EOL

      - name: Initialize Terraform (Destroy)
        run: |
          echo "## Reinitializing Terraform for Destroy"
          ENV_PATH="./environments"
          cd "$ENV_PATH" || exit 1
          terraform init -upgrade || { echo "Terraform init failed"; exit 1; }
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Generate Destroy Plan
        run: |
          echo "## Generating Destroy Plan"
          ENV_PATH="./environments"
          RESOURCES="${{ github.event.inputs.resources_to_destroy }}"
          if [ -z "$RESOURCES" ]; then
            echo "No resources specified for destruction. Exiting."
            exit 1
          fi
          cd "$ENV_PATH" || exit 1
          terraform plan -destroy -target=$RESOURCES -out=tfdestroyplan || { echo "Terraform plan generation failed"; exit 1; }
          echo "## Terraform Destroy Plan Created"
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Apply Destroy Plan
        run: |
          echo "## Applying Destroy Plan"
          ENV_PATH="./environments"
          cd "$ENV_PATH" || exit 1
          terraform apply -auto-approve tfdestroyplan || { echo "Terraform destroy failed"; exit 1; }
          echo "## Terraform Destroy Completed"
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
